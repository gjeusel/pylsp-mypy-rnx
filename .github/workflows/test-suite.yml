---
name: Test Suite

on:
  push:
  pull_request:
    types: [opened, synchronize]


.setup-poetry: &setup-poetry
  - name: "Install and configure Poetry"
    uses: snok/install-poetry@v1.1.6
    with:
      version: 1.2.0a1
      virtualenvs-create: true
      virtualenvs-in-project: false

  - name: "Load cached venv"
    id: cached-poetry-dependencies
    uses: actions/cache@v2
    with:
      path: .venv
      key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

  - name: "Install dependencies"
    if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    run: poetry install --no-interaction --no-root

  - name: "Install libraries"
    run: poetry install --no-interaction


jobs:
  linting:
    name: "Python Linting"
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v2

      - name: "setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      *setup-poetry

      - name: "Run linting"
        run: poetry run pre-commit run --all-files

  pytest:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', ]
        python-version: ["3.8", "3.9", "3.10.0-beta.2"]

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v2

      - name: "setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      *setup-poetry

      - name: "Run tests"
        run: poetry run pytest --cov=pylsp_mypy_rnx --cov-report=xml

      - name: "Upload coverage"
        # requires CODECOV_TOKEN in repository secrets
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
